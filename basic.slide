The Go Programming Language
Basic
Tags: go, golang

Anuchit Prasertsang
Developer
anuchit.prasertsang@gmail.com
https://github.com/AnuchitO
@twitter_AnuchitO

* Editor

* Basic

* Packages
- Every Go program is made up of packages.
- Programs start running in package main.
.play basic/packages.go
- By convention, the package name is the same as the last element of the import path. For instance, the *"math/rand"* package comprises files that begin with the statement package *rand*.

* Imports
- This code groups the imports into a parenthesized, "factored" import statement.
.code basic/imports.go
- You can also write multiple import statements, like:

  import "fmt"
  import "math"

But it is good style to use the factored import statement.

* Exported names
- In Go, a name is exported if it begins with a *capital* *letter*.

  Pizza
  Pi
  Println

: pizza and pi do not start with a capital letter, so they are not exported.

- When importing a package *math.Pi*
- Any "unexported" names are not accessible from outside the package.
: workshop => refactor function to package

* Functions
- A function can take zero or more arguments.

- In this example, *add* takes two parameters of type *int*.

- Notice that the _type_ comes _after_ the _variable_ _name_.

.code basic/functions.go

  func add(x, y int) int

: (For more about why types look the way they do, see the article on Go's declaration syntax.)

* Multiple results
- a function can return any number of results
- the *swap* function returns two string.

.play basic/multiple_results.go /START/,/END/

* Named return values
- Go's return values may be named. If so, they are treated as variables defined at the top of the function.

.code basic/named_results.go /START/,/END/


- A return statement without arguments returns the named return values. This is known as a *"naked"* return.

- Naked return statements should be used only in short functions.
: They can harm readability in longer functions.
: These names should be used to document the meaning of the return values.

* Variables
- The *var* statement declares a list of variables; as in function argument lists, the type is last.

- A *var* statement can be at package or function level. We see both in this example.

.play basic/variables.go

* Variables with initializers
- If an initializer is present, the type can be omitted; the variable will take the type of the initializer.
.play basic/variables_with_initializers.go

* Short variable declarations
- Inside a function, the *:=* short assignment statement can be used in place of a *var* declaration with implicit type.
.play basic/sort_variable_initialinze.go
- Outside a function, every statement begins with a keyword (_var_, _func_, and so on) and so the _:=_ construct is not available.

* Basic types
Go's basic types are

  bool

  string

  int  int8  int16  int32  int64
  uint uint8 uint16 uint32 uint64 uintptr

  byte // alias for uint8

  rune // alias for int32
      // represents a Unicode code point

  float32 float64

  complex64 complex128

The _int_, _uint_, and _uintptr_ types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems.
When you need an integer value you should use _int_ unless you have a specific reason to use a sized or unsigned integer type.

* Zero values
Variables declared without an explicit initial value are given their zero value.

The zero value is:
*0* for numeric types,
*false* for the boolean type
*""* (the empty string) for strings.

.play basic/zero.go

%q	a double-quoted string safely escaped with Go syntax

* Type conversions
The expression *T(v)* converts the value *v* to the type *T*.

Some numeric conversions:

  var i int = 42
  var f float64 = float64(i)
  var u uint = uint(f)

Or, put more simply:

  i := 42
  f := float64(i)
  u := uint(f)

Unlike in C, in Go assignment between items of different type requires an explicit conversion.

* Type conversions - example
Try removing the _float64_ or _uint_ conversions in the example and see what happens.
.code basic/type_conversions.go

* Type inference
When declaring a variable without specifying an explicit type
(either by using the *:=* syntax or *var* *=* expression syntax),
the variable's type is inferred from the value on the right hand side.

When the right hand side of the declaration is typed, the new variable is of that same type:

  var i int
  j := i // j is an int

But when the right hand side contains an untyped numeric constant,
the new variable may be an _int_, _float64_, or _complex128_ depending on the precision of the constant:

  i := 42           // int
  f := 3.142        // float64
  g := 0.867 + 0.5i // complex128

* Type inference - example
Try changing the initial value of _v_ in the example code and observe how its type is affected.
.code basic/type_inference.go

* Constants
Constants are declared like variables, but with the const keyword.
Constants can be _character_, _string_, _boolean_, or _numeric_ values.
Constants *cannot* be declared using the := syntax.
.play basic/constants.go

: * Numeric Constants
: Numeric constants are high-precision values.
: An untyped constant takes the type needed by its context.
: Try printing needInt(Big) too.
: (An int can store at maximum a 64-bit integer, and sometimes less.)
: .play basic/numeric_constants.go /START/,/END/

* Flow Control

* For
Go has only one looping construct, the *for* loop.
.play flowcontrol/for.go /START/,/END/

The basic *for* loop has three components separated by semicolons:

  the init statement: executed before the first iteration
  the condition expression: evaluated before every iteration
  the post statement: executed at the end of every iteration

The init statement will often be a short variable declaration,
and the variables declared there are visible only in the scope of the *for* statement.
The loop will stop iterating once the boolean condition evaluates to *false*.

Note: there are no parentheses surrounding

* For continued
The init and post statements are optional.
.play flowcontrol/for_continued.go /START/,/END/

* For is Go's "while"
At that point you can drop the semicolons: C's while is spelled for in Go.
.play flowcontrol/for_is_gos_while.go /START/,/END/

* Forever
If you omit the loop condition it loops forever, so an infinite loop is compactly expressed.
.play flowcontrol/forever.go /START/,/END/